  The program must accept a string S as the input.
  The string S contains one . (dot) in it. 
  If the string S forms a palindrome by replacing . (dot) by 
  any character or by removing the . (dot) then the program must 
  print the palindromic string as the output
  Else the program must print -1 as the output. 
  Note: If a palindromic string can be formed by both removing and 
  
  replacing the . (dot) then the priority is given for removing the . (dot).
  Boundary condition(s): 3 <= Length of S <= 100 
  Input Format: The first line contains the string S. 
  Output Format: The first line contains either a palindromic string or -1. 
  Example Input/Output 1: Input: a.ba Output: aba 
  Example Input/Output 2: Input: kajh.ak Output: kajhjak 
  Example Input/Output 3: Input: a.c Output: -1
  
  
  
  
  
  #include<stdio.h>
  int main()
  {
    char a[100];
    scanf("%s",a);
    int n=strlen(a);
    int length= n-1;
    while(index<length)
    {
        if(a[index]!='.' && a[n-index-1]!='.' && a[index]!=a[length])
            flag=0;
        index++;
        length--;
    }
    if(flag)
    {
        for(int i=0;i<n;i++)
        {
            if(a[i]!='.')
                printf("%c",a[i]);
            if(a[i]=='.' && n%2!=0 && i==(n/2))
                continue;
            else if(a[i]=='.' && n%2!=0 && i!=(n/2))
                printf("%c",a[n-i-1]);
            else if(a[i]=='.' && i!=(n/2)+1 && i!=(n/2)-1)
                printf("%c",a[n-i-1]);
        }
    }
    else
      printf("-1");
  }
